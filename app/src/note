Android Studio 按逻辑关系将每个模块的源代码和资源分组为源代码集。模块的 main/ 源代码集包含其所有构建变体共用的代码和资源。
其他源代码集目录是可选的，在您配置新的构建变体时，Android Studio 不会自动为您创建这些目录。不过，创建类似于 main/ 的源代码集
有助于组织 Gradle 仅在构建特定应用版本时才应使用的文件和资源：

src/main/
此源代码集包含所有构建变体共用的代码和资源。

src/buildType/
创建此源代码集可加入特定构建变体专用的代码和资源。

src/productFlavor/
创建此源代码集可加入特定产品变种专用的代码和资源。
注意：如果配置构建以组合多个产品变种，则可以为变种维度之间的每个产品变种组合创建源代码集目录：src/productFlavor1ProductFlavor2/

src/productFlavorBuildType/
创建此源代码集可加入特定构建变体专用的代码和资源。
例如，如需生成应用的“fullDebug”版本，构建系统需要合并来自以下源代码集的代码、设置和资源：

src/fullDebug/（构建变体源代码集）
src/debug/（构建类型源代码集）
src/full/（产品变种源代码集）
src/main/（主源代码集）
注意：当您在 Android Studio 中使用 File > New 菜单选项新建文件或目录时，可以针对特定源代码集进行创建。
可供您选择的源代码集取决于您的构建配置，如果所需的目录尚不存在，Android Studio 会自动创建。

如果不同源代码集包含同一文件的不同版本，Gradle 将按以下优先顺序决定使用哪一个文件（左侧源代码集替换右侧源代码集的文件和设置）：

构建变体 > 构建类型 > 产品变种 > 主源代码集 > 库依赖项
这样一来，Gradle 便可使用专用于您试图构建的构建变体的文件，同时重复利用与应用的其他版本共用的 Activity、
应用逻辑和资源。在合并多个清单时，Gradle 会使用相同的优先顺序，这样每个构建变体都能在最终清单中定义不同
的组件或权限。如需详细了解如何创建自定义源代码集，请参阅创建构建变体的源代码集。